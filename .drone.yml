---
kind: pipeline
type: docker
name: default

steps:

  - name: lint
    image: golangci/golangci-lint
    pull: if-not-exists
    commands:
      - golangci-lint run

  - name: wait for postgres
    image: postgres:14.4-alpine
    environment:
      PGHOST: postgres
      PGPORT: 5432
    commands:
      - until pg_isready --host=$PGHOST --port=$PGPORT; do sleep 2; done

  - name: env info
    image: alpine:3
    pull: if-not-exists
    environment:
      COMBINED_VAR: ${DRONE_COMMIT_AUTHOR} ${DRONE_COMMIT_BRANCH}
    commands:
      - echo DRONE_BRANCH is $DRONE_BRANCH
      - echo DRONE_BUILD_NUMBER is $DRONE_BUILD_NUMBER
      - echo DRONE_COMMIT_SHA is $DRONE_COMMIT_SHA
      - echo DRONE_PULL_REQUEST is $DRONE_PULL_REQUEST
      - echo DRONE_PULL_REQUEST_TITLE is $DRONE_PULL_REQUEST_TITLE
      - echo DRONE_REMOTE_URL is $DRONE_REMOTE_URL
      - echo DRONE_REPO_NAME is $DRONE_REPO_NAME

  - name: test
    image: golang:1.19
    pull: if-not-exists
    commands:
      - go clean -testcache
      - go test -race ./... -v

  - name: build
    image: golang:1.19
    pull: if-not-exists
    commands:
      - go build -ldflags "-extldflags=-static" -o release/linux/amd64/harness-migrate

  - name: publish
    image: plugins/docker
    pull: if-not-exists
    settings:
      repo: jimsheldon/go-fruits-api
      auto_tag: true
      auto_tag_suffix: build-${DRONE_BUILD_NUMBER}
      dockerfile: docker/Dockerfile.linux.amd64
      username:
        from_secret: dockerhub-username
      password:
        from_secret: dockerhub-password
    when:
      event:
        exclude:
          - pull_request

services:
  - name: postgresql
    image: postgres:14.4-alpine
    environment:
      POSTGRES_PORT: 5432
      POSTGRES_PASSWORD: pa55Word!
      POSTGRES_USER: demo
      POSTGRES_DB: demodb

trigger:
  branch:
    include:
      - main
  event:
    - push
    - pull_request
  ref:
    exclude:
      - refs/tags/**
